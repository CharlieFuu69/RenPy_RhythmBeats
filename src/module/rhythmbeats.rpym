## CharlieFuu69
## Ren'Py RhythmBeats!

## Módulo RPYM: Sistema de acción rítmica

## © 2023 CharlieFuu69 - GNU GPL v3.0

################################################################################

init python:
    """
    ----------------------------------------------------------------------------
                        <- /!\ INFORMACIÓN ÚTIL /!\ ->
    Todos los elementos documentados que empiecen con (NO DOCUMENTADO), son
    elementos que RhythmBeats utiliza de forma interna, y que no tienen tanta
    relevancia para el usuario final, a excepción de querer revisar el código
    fuente del módulo.

    Para incrementar el rendimiento en Windows, puedes desbloquear el plan de
    energía de Alto Rendimiento ejecutando el siguiente comando en Powershell:

    powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61
    ----------------------------------------------------------------------------
    """

    import json
    import os
    import pygame
    import itertools

    config.pygame_events.extend([
        pygame.FINGERDOWN,
        pygame.FINGERUP
    ])

    def logger(level, content):
        print("[%s] %s" % (level, content))

    ## -------------------------------------------------------------------------- ##
    ## Clases

    class RhythmBeatsException(Exception):
        """Una clase simple para emitir excepciones bajo el nombre de Ren'Py RhythmBeats."""
        pass

    class RhythmPlayground:

        def __init__(self, fn, displayable, song_file, offset_map = 0.0, offset_game = 0, threshold = 100, max_score = 1000, failsafe = False):
            """Constructor de la clase RhythmPlayground().
            Recibe 8 parámetros (3 obligatorios) en el momento que se crea la
            instancia de la clase.

            Estos parámetros son los siguientes:

            fn (str):
                Este parámetro es obligatorio, y recibe una cadena con la ruta
                del archivo BEAT relativa a la carpeta /game de tu juego.
                Este archivo puede ser leído incluso dentro de un paquete RPA.

            displayable (str o displayable):
                Este parámetro es obligatorio, y recibe como argumento un elemento
                displayable que será utilizado para mostrar cada nota en la pantalla.
                Puedes pasar como argumento una ruta de una imagen, o algún displayable
                de Ren'Py como Image() o Transform().

            song_file (str o list):
                Este parámetro es obligatorio, y recibe como argumento una cadena
                de texto con la ruta del archivo de audio que contiene la canción
                a reproducir durante la partida. También puedes pasar una lista
                para crear una cola de reproducción, por ejemplo, en el caso de
                que quieras agregar un breve silencio antes de que inicie la canción
                real de la partida.
                Detalles: https://www.renpy.org/doc/html/audio.html#renpy.music.play

            offset_map (int o float):
                Si no es 0, este parámetro recibe como argumento un número entero
                o un número de coma flotante que representa el tiempo (en segundos)
                que el beatmap debe compensar respecto de la pista musical, en caso
                de que exista un desfase entre ambas.
                Valores positivos retrasan al beatmap respecto de la pista musical,
                mientras que valores negativos lo adelantan.

            offset_game (int):
                Si no es 0, este parámetro recibe como argumento un número entero
                que representa el tiempo (en milisegundos) que se agrega como una
                compensación personalizable por el jugador, cumpliendo un rol
                similar al calibrador de Timing que tienen algunos juegos de ritmo.

                Tip: Almacena ese número en una variable persistente para que el
                jugador no tenga que calibrar una y otra vez cada vez que inicia
                el juego. Luego pasa esa variable como argumento de este parámetro.

            threshold (int):
                Si no es 100, este parámetro recibe como argumento un número entero,
                que representa el umbral de tiempo base (en milisegundos) para
                detectar si el jugador ha acertado una nota.
                Por defecto el umbral ha sido fijado en 100ms (0.1 segundos), lo
                que da un total de 200ms para acertar una nota.

            max_score (int):
                Este parámetro recibe como argumento un número entero que representa
                un máximo 'hipotético' de puntos que se podría recibir por nota.
                Por defecto, el máximo hipotético que se podría recibir es de
                1000 puntos.

            failsafe (bool):
                El modo seguro permite reproducir el beatmap sin necesidad de tocar las notas.
                Es útil en caso de querer ajustar visualmente la cascada de notas respecto
                de la música (mediante offset_map).
                Si es True, ejecutará el beatmap en modo seguro. Si es False, el
                juego se ejecutará normalmente.
            """

            ####################################################################
            ## ATRIBUTOS MODIFICABLES

            ## ------------------- ÁREA DE SPRITEMANAGERS ------------------- ##
            self.map_mgr = SpriteManager(update = self.map_callback)
            self.waterfall_mgr = SpriteManager(update = self.waterfall_callback, event = self.tap_events)

            ## ---------------- RUTAS Y AJUSTES PRINCIPALES ----------------- ##

            ## Rutas relativas.
            self.fn = fn
            self.displayable = displayable
            self.song_file = song_file
            self.miss_sound = None

            ## Calibración del juego y márgen de puntuación por nota.
            self.offset = offset_map + (offset_game / 1000.0)
            self.threshold = (threshold / 1000.0)
            self.max_score = max_score

            ## Ejecución en modo seguro
            self.failsafe = failsafe

            ## Identificador de teclas de Pygame
            self.left_key = pygame.K_c
            self.right_key = pygame.K_m

            ####################################################################
            ## ATRIBUTOS NO MODIFICABLES POR EL USUARIO (RESERVADOS)

            ## Parámetros de funcionamiento del sistema
            self.core_tick = 0.01667
            self.waterfall_tick = 0.001
            self.map_delta = 1.04

            ## ----------------- DATOS DE BEATMAPS CARGADOS ----------------- ##

            ## Almacenaje del beatmap cargado.
            self.lane_L = list()
            self.lane_R = list()

            ## Almacenaje/Grupo de sprites
            self.spritegroup = list()

            ## ------------- CÓMPUTO  Y ACTIVIDAD DE LA PARTIDA ------------- ##

            ## Índices de timestamps y progreso del beatmap
            self.index = {"left" : 0, "right" : 0}
            self.note_pass = {"left" : 0, "right" : 0}
            self.key_tap = {"left" : 0.0, "right" : 0.0}
            self.timestamp_log = list()
            self.map_progress = (0, 0)
            self.last_tap = 0.0

            ## Cómputo de juego
            self.combo = 0
            self.perfect = 0
            self.miss = 0
            self.stage_score = 0
            self.note_score = 0

            ## Status de reproducción de la pista musical
            self.playback_active = False

            ## ¿El beatmap aún está corriendo?
            self.running = {"left" : True, "right" : True}
            self.epoch = 0.0

            ## Presión de las teclas (o del área en una pantalla táctil)
            self.left = False
            self.right = False

            ## ------------------ OTROS ELEMENTOS DE PYGAME ----------------- ##

            ## Área de pulsos para pantallas táctiles
            self.area_left = pygame.Rect(0, 0, 640, 720)
            self.area_right = pygame.Rect(640, 0, 640, 720)

            ## Registro de dedos en pantallas táctiles
            self.finger_log = dict()


        ## ------------------------------------------------------------------ ##
        ## Métodos para uso interno de RhythmBeats

        def tap_events(self, ev, x, y, st):
            """
            (NO DOCUMENTADO)
            Este método recoge los eventos de Pygame para reconocer los toques
            del jugador en el juego, ya sea con un teclado o con pantalla táctil.

            NOTA: No puedo realizar lecturas de múltiples dedos en una pantalla
            táctil, ya que Ren'Py parece limitarme los eventos de Pygame, por lo
            que el reconocimiento de toques en móviles puede ser... desagradable =(
            """

            ## ¿Está jugando en PC? Obtener el estado de las teclas de juego.
            if renpy.windows or renpy.linux:
                keys = pygame.key.get_pressed()
                self.left = keys[self.left_key]
                self.right = keys[self.right_key]

            ## ¿Está jugando en Android? Leamos las coordenadas de los dedos.
            elif renpy.android:
                if ev.type == pygame.FINGERDOWN:
                    if all((x in xrange(0, 400), y in xrange(0, 720))):
                        self.left = True
                    if all((x in xrange(880, 1280), y in xrange(0, 720))):
                        self.right = True

                if ev.type == pygame.FINGERUP:
                    self.left = False
                    self.right = False


        def get_note_score(self, diff):
            """
            (NO DOCUMENTADO)
            Este método calcula un puntaje para cada nota musical, en función
            de los milisegundos de desfase obtenidos al tocar una nota.
            El puntaje obtenido por nota es inversamente proporcional al tiempo
            de desfase al tocar una nota, por lo que una menor precisión otorgará
            menos puntos por nota."""

            diff = abs(diff) * 1000.0
            max_time = self.threshold * 1000.0

            rv = int(self.max_score - (self.max_score * (diff / max_time)))

            return rv


        def map_callback(self, st):
            """
            (NO DOCUMENTADO)
            Este método se encarga de computar las interacciones del jugador,
            con el fin de determinar si el jugador acierta o falla alguna nota.
            El sistema rítmico opera respecto de un tiempo de época (Epoch) dado
            en segundos, proporcionado por un SpriteManager() sin displayables.

            No retorna ningún valor importante para el desarrollador o el jugador."""

            ## Reproduce la canción
            if not self.playback_active:
                renpy.music.play(self.song_file, channel="music", loop=False, tight=True)
                self.playback_active = True

            ## ------------------------------------------------------------------ ##
            ## Área de interacciones

            if self.is_running():
                self.epoch = round(st, 2)

            if self.left:
                self.key_tap["left"] = st
            if self.right:
                self.key_tap["right"] = st

            ## ------------------------------------------------------------------ ##
            ## Área de análisis de taps

            ## Determina si el índice de cada fila de notas ha llegado a su fin
            self.running["left"] = self.note_pass["left"] < len(self.lane_L)
            self.running["right"] = self.note_pass["right"] < len(self.lane_R)

            ## Obtiene la diferencia entre el timestamp de la tecla con el beatmap
            DIFF_L = self.key_tap["left"] - self.lane_L[self.index["left"]]
            DIFF_R = self.key_tap["right"] - self.lane_R[self.index["right"]]

            ## Obtiene si la nota tocada está dentro del umbral de detección
            HIT_L = all((DIFF_L >= -self.threshold, DIFF_L <= self.threshold))
            HIT_R = all((DIFF_R >= -self.threshold, DIFF_R <= self.threshold))

            ## Obtiene si el timestamp actual ha sido ignorado por el jugador
            BAD_L = all((st - self.threshold > self.lane_L[self.index["left"]], self.key_tap["left"] < st + self.threshold))
            BAD_R = all((st - self.threshold > self.lane_R[self.index["right"]], self.key_tap["right"] < st + self.threshold))

            ## ------------------------------------------------------------------ ##
            ## Área de cómputo

            ## Keypad L
            if HIT_L and self.running["left"]:
                self.index["left"] += 1 if self.index["left"] < len(self.lane_L) -1 else 0
                self.timestamp_log.append(DIFF_L)
                self.note_pass["left"] += 1
                self.combo += 1
                self.perfect += 1
                self.stage_score += self.get_note_score(DIFF_L)
                self.note_score = self.get_note_score(DIFF_L)

                self.last_tap = DIFF_L * 1000.0

            elif BAD_L and self.running["left"]:
                if not self.failsafe:
                    renpy.play(self.miss_sound, channel = "audio")
                    self.combo = 0
                    self.miss += 1

                self.index["left"] += 1 if self.index["left"] < len(self.lane_L) -1 else 0
                self.note_pass["left"] += 1
                self.note_score = 0


            ## Keypad R
            if HIT_R and self.running["right"]:
                self.index["right"] += 1 if self.index["right"] < len(self.lane_R) -1 else 0
                self.timestamp_log.append(DIFF_R)
                self.note_pass["right"] += 1
                self.combo += 1
                self.perfect += 1
                self.stage_score += self.get_note_score(DIFF_R)
                self.note_score = self.get_note_score(DIFF_R)

                self.last_tap = DIFF_R * 1000.0

            elif BAD_R and self.running["right"]:
                if not self.failsafe:
                    renpy.play(self.miss_sound, channel = "audio")
                    self.combo = 0
                    self.miss += 1

                self.index["right"] += 1 if self.index["right"] < len(self.lane_R) -1 else 0
                self.note_pass["right"] += 1
                self.note_score = 0

            ## Esto actualiza costantemente una tupla con el progreso del beatmap.
            self.map_progress = (self.note_pass["left"] + self.note_pass["right"], len(self.lane_L + self.lane_R))

            return 0.016 ## ~60 Hz


        def sprite_creator(self):
            """
            (NO DOCUMENTADO)
            Este método crea 'n' cantidad de sprites para el SpriteManager()
            en función de la cantidad de notas que posee el beatmap."""

            def add_note(timestamp, lane):
                sprite = self.waterfall_mgr.create(self.displayable)
                sprite.x = 560 if lane == "LEFT" else 650
                sprite.y = -120

                self.spritegroup.append((sprite, timestamp, lane))

            for left, right in self.beatmap_object():
                if isinstance(left, float):
                    add_note(left, "LEFT")
                if isinstance(right, float):
                    add_note(right, "RIGHT")
            self.spritegroup = tuple(self.spritegroup)


        def notetrace(self, moverange, heading, timestamp, epoch):
            """
            (NO DOCUMENTADO)
            Esta función calcula las coordenadas de las notas que van cayendo,
            respecto del timestamp de esa nota y el tiempo epoch actual."""

            trace = abs(moverange[0] - moverange[1])
            start = epoch - (timestamp - self.map_delta)
            timerange = (epoch * start) / timestamp

            if heading == "Y":
                rv = (trace * timerange) - abs(moverange[0])

                if rv < moverange[0]:
                    rv = moverange[0]
                elif rv > moverange[1]:
                    rv = moverange[1]

            elif heading == "XL":
                rv = abs((trace * timerange) - moverange[0])

                if epoch > timestamp or rv < moverange[1]:
                    rv = moverange[1]
                if rv > moverange[0]:
                    rv = moverange[0]

            elif heading == "XR":
                rv = abs((trace * timerange) + moverange[0])

                if rv < moverange[0]:
                    rv = moverange[0]
                elif rv > moverange[1]:
                    rv = moverange[1]

            return rv


        def waterfall_callback(self, st):
            """
            (NO DOCUMENTADO)
            Este método actualiza la posición de cada nota en el waterfall
            visible en la pantalla."""

            for sp, stamp, lane in self.spritegroup:
                if lane=="LEFT" and st > stamp - self.map_delta:
                    sp.x = self.notetrace((550, 430), "XL", stamp, st)
                    sp.y = self.notetrace((-120, 530), "Y", stamp, st)

                if lane=="RIGHT" and st > stamp - self.map_delta:
                    sp.x = self.notetrace((650, 765), "XR", stamp, st)
                    sp.y = self.notetrace((-120, 530), "Y", stamp, st)

                if st > stamp + 0.9:
                    sp.destroy()

            return self.waterfall_tick


        ## ------------------------------------------------------------------ ##
        ## Métodos para uso externo (Usuario final)

        def load(self):
            """Este método carga y procesa las secuencias de un archivo beatmap de
            una canción en específico. El archivo `.beat` debe ser señalado en el
            momento en que se crea una instancia de la clase.

            Esto debe ser llamado posterior a instanciar la clase. No recibe ningún
            argumento ni tampoco retorna datos."""

            logger("Process", "Cargando beatmap...")

            try:
                with renpy.file(self.fn) as beatmap:
                    logger("Stats", "Ruta relativa: %s." % self.fn)

                    bmpdata = beatmap.readlines()

                    for keypad in bmpdata[1:]:
                        keypad = keypad.replace("\n", "").replace("\r", "").split("|")

                        left = keypad[0]
                        right = keypad[1]

                        if left != "" or right != "":
                            if not "End" in left:
                                self.lane_L.append(eval(left) + self.offset)

                            if not "End" in right:
                                self.lane_R.append(eval(right) + self.offset)

                    ## Casting de listas a tuplas
                    self.lane_L = tuple(self.lane_L)
                    self.lane_R = tuple(self.lane_R)

                    logger("Stats", "Offset final: %ss." % self.offset)
                    logger("Stats", "Full Combo: %s notas." % (len(self.lane_L) + len(self.lane_R)))

                    beatmap.close()

                    logger("Process", "Preparando waterfall (SpriteManager)...")
                    self.sprite_creator()
                    logger("OK", "Beatmap listo para ejecutar.\n")

            except Exception as open_error:
                raise RhythmBeatsException("(%s) %s" % (type(open_error), str(open_error)))


        def beatmap_object(self):
            """Este método retorna un objeto iterable `itertools.zip_longest` con el
            beatmap para la visualización de los taps en una screen. Esto ayuda a
            iterar el beatmap con solo 1 bucle for en una screen =D

            Esto debe ser llamado posterior a instanciar la clase. No recibe ningún
            argumento en particular."""

            return itertools.zip_longest(self.lane_L, self.lane_R, fillvalue = "End")


        def accuracy_rate(self):
            """
            Este método devuelve una tupla con la precisión media del jugador
            durante la partida, y la tendencia de reacción (en atraso o en adelanto)
            con flechas.

            **Formato de retorno:**
            (Tiempo de reacción media, tendencia de reacción)

            Los valores de precisión media son retornados en milisegundos, mientras
            que las flechas de tendencia de reacción son retornadas como cadenas unicode.
            Puedes usar este método para obtener estadísticas durante la partida o
            al finalizar =D"""

            average_ms = 0.0

            ## Esta condicional previene una posible excepción ZeroDivisionError.
            if len(self.timestamp_log) > 0:
                average_ms = round(sum(self.timestamp_log) / len(self.timestamp_log), 4) * 1000.0

            if average_ms == 0.0:
                reaction = u"{font=DejaVuSans.ttf}⇋{/font}"
            elif average_ms < 0.0:
                reaction = u"{font=DejaVuSans.ttf}◂{/font}"
            elif average_ms > 0.0:
                reaction = u"{font=DejaVuSans.ttf}▸{/font}"

            return abs(average_ms), reaction


        def is_running(self):
            """Este método retorna `True` si el mapa aún se está ejecutando. En el
            caso contrario, retorna `False` si se recorrieron todas las notas del
            Beatmap."""

            return self.running["left"] or self.running["right"]
