## CharlieFuu69
## Ren'Py Asset Download Complement (RADC)

## Módulo RPYM: Módulo principal de RADC.

## © 2023 CharlieFuu69 - GNU GPL v3.0

################################################################################

default persistent.local_index = dict()
default persistent.radc_init = False

init python:
    import time, json, requests, ssl, threading

    class UpdateManager():

        def __init__(self, index_url, package_ext, skip_process=False):
            """Constructor de la clase UpdateManager().
            Esta clase se encarga de realizar los procedimientos de recuperación
            de datos del host, comprobar si existen actualizaciones y gestionar
            la descarga de paquetes necesarios para la ejecución del juego."""

            ## ------------------------ CONFIGURACIÓN ----------------------- ##

            ## Configuración de Endpoints y peticiones
            self.index_url = index_url
            self.headers = {"User-Agent" : "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36",
                            "Accept-Encoding" : "identity"}

            ## Configuración de rutas de descarga
            self.gamedir = config.gamedir if PC_ENV else os.path.join(os.environ["ANDROID_PUBLIC"], "game")
            self.basedir = config.basedir if PC_ENV else os.environ["ANDROID_PUBLIC"]

            self.ext = package_ext

            ## ¿Debe saltarse el proceso de verificación y descarga?
            self.skip = skip_process

            self.local_index = persistent.local_index
            self.remote_index = dict()

            self.update_queue = list()

            self.progress = [0, 0]

            ## --------------------------- STATUS --------------------------- ##

            ## Flags durante las peticiones
            self.update_mode = False
            self.request_end = False
            self.exception_break = False
            self.exception_content = None

            ## -------------------- PROGRESO DE DESCARGA -------------------- ##
            self.batch_progress = [0, len(self.update_queue)]
            self.mb_received = 0.0
            self.update_size = 0.0

            self.current_size = 0.0
            self.file_size = 0.0



        def setup(self):
            """Este método prepara el entorno de administración y elimina archivos residuales
            de descargas fallidas o repetidas."""

            if not persistent.local_index:
                self.local_index = persistent.local_index = {}

            if not os.path.exists(self.gamedir):
                os.mkdir(self.gamedir)

            logger(logging.info, "Cleaning temporal files...")
            for file in os.listdir(self.gamedir):
                if file.endswith(("tmp", ")%s" % self.ext)):
                    os.remove(os.path.join(self.gamedir, file))

            logger(logging.info, "Temporal files deleted.")


        def pass_flag(self):
            """Este método retorna True si el administrador de descargas se ejecuta
            por primera vez, o si el administrador entra en modo de actualización."""

            return any([not persistent.radc_init, self.update_mode])


        def get_exception(self):
            """Este método retorna True si ocurrió una excepción durante el procedimiento
            de actualización. En el caso contrario, retorna False."""

            if isinstance(self.exception_content, Exception):
                return True
            return False


        def get_update(self):
            """Este método realiza la comparación de los índices del servidor con
            los índices locales para comprobar si se requiere actualizar o descargar
            nuevos paquetes.
            Al obtener la comparación, recupera los endpoints de los paquetes
            y computa el tamaño total de descarga según el header recibido."""

            ssl._create_default_https_context = ssl._create_unverified_context

            current_queue = list()

            logger(logging.info, "Comparing local index with remote index...")
            if not self.skip:
                self.update_mode = True

                for pkg in self.remote_index:
                    if pkg["name"] in self.local_index:
                        if pkg["md5"] != self.local_index[pkg["name"]] or not renpy.exists(pkg["name"] + self.ext):
                            if renpy.exists(pkg["name"] + self.ext):
                                os.remove(os.path.join(self.gamedir, pkg["name"] + self.ext))
                            current_queue.append(pkg)
                    else:
                        current_queue.append(pkg)
            else:
                logger(logging.info, "Compare process skipped. Developer mode active.")

            self.progress[1] = len(current_queue)

            ## Adquisición de endpoints y tamaño de descarga
            if len(current_queue) > 0:
                rbs_alert(__("Adquiriendo URL..."), icon="ui_icon_waiting")
                logger(logging.info, "Calculating full download size...")

                for pkg in current_queue:
                    self.progress[0] += 1

                    r = requests.head(pkg["url"], headers = self.headers, timeout = 5, allow_redirects = True)
                    self.update_size += round(float(r.headers["Content-Length"]) / 1048576.0, 2)
                    self.update_queue.append(pkg)
                    renpy.restart_interaction()


        def download_fmt(self):
            now_percent = 0.0

            if self.update_size > 0.0:
                now_percent = float(100.0 * (self.mb_received / self.update_size))

            return "%.02f MB / %.02f MB  %.02f%%" % (self.mb_received, self.update_size, now_percent)


        def start_download(self):
            """Nuevo método de descarga.
            Al ejecutar este método, se inicia una descarga por lotes de la cola
            de archivos almacenada en 'self.update_queue'. Debe ejecutarse en
            un hilo para no bloquear el proceso principal."""

            self.request_end = False
            self.exception_break = False
            self.batch_progress[1] = len(self.update_queue)
            static_queue = None

            if not static_queue:
                static_queue = tuple(self.update_queue)

            logger(logging.info, "Downloading assets...")
            logger(logging.info, "Download size: %.02f MB." % self.update_size)
            logger(logging.info, "File queue: %s" % len(self.update_queue))

            try:
                for pkg in static_queue:
                    self.batch_progress[0] += 1
                    self.current_size = 0.0

                    tempfile = os.path.join(self.gamedir, pkg["name"] + ".tmp")
                    savefile = os.path.join(self.gamedir, pkg["name"] + self.ext)

                    r = requests.get(pkg["url"], allow_redirects=True, stream=True, timeout=5)

                    self.file_size = float(r.headers["Content-Length"]) / 1048576.0

                    with open(tempfile, "wb") as f:
                        for chunk in r.iter_content(chunk_size=1024):
                            self.current_size += float(len(chunk) / 1048576.0)
                            self.mb_received += float(len(chunk) / 1048576.0)

                            if chunk:
                                f.write(chunk)

                        f.close()

                    r.close()
                    del r

                    if os.path.exists(savefile):
                        os.remove(savefile)

                    os.rename(tempfile, savefile)
                    self.update_queue.remove(pkg)
                    persistent.local_index.update({pkg["name"] : pkg["md5"]})


            except Exception as download_error:
                logger(logging.error, repr(download_error))
                self.exception_break = True
                self.exception_content = str(download_error).replace("[", "[[")

            finally:
                self.request_end = True
                persistent.radc_init = True
                logger(logging.info, "%s of %s files downloaded." % self.batch_progress)
                renpy.restart_interaction()


        def run(self):
            """Este método ejecuta la búsqueda de actualizaciones en un hilo
            paralelo al del juego mediante threading.Thread."""

            remote_ver = None

            self.setup()

            try:
                logger(logging.info, "Acquiring remote index...")
                r = requests.get(self.index_url, timeout = 5)

                if r.status_code == 200:
                    index_digest = json.loads(r.text)

                    self.remote_index = index_digest["packages"]
                    remote_ver = index_digest["version"]

                    logger(logging.info, "Checking global version...")
                    if remote_ver != config.version:
                        renpy.call_screen("msg_global_update", now_version=remote_ver)

                    self.get_update()

                else:
                    raise Exception("Bad HTTP Response: %s" % r)

            except Exception as update_error:
                self.exception_break = True
                self.exception_body = str(update_error).replace("[", "[[")
                logger(logging.error, repr(update_error))

            finally:
                self.request_end = True
                renpy.restart_interaction()
                return


## -------------------------------------------------------------------------- ##
